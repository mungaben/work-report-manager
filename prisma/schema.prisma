// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // schemas   = ["User", "Report"]
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  role      Role     @default(USER)
  online    Boolean  @default(false)

  Reports     Report[]
  messages    Message[]      @relation("UserToMessage")
  reply       ReplyMessage[]
  activity    Activity[]
  Message     Message[]      @relation("sender")
  GeoupAuthor GroupMessage[] @relation("AUTHOR")

  GroupMessage   GroupMessage[] @relation("GROUP")
  // GroupMessageGroup GroupMessage[] @relation("receivermany")
  GroupMessagemany   GroupMessage?  @relation(fields: [groupMessageId], references: [id])
  groupMessageId String?
}

model Report {
  id            String         @id @default(uuid())
  from          FromTime
  to            ToTime
  date          DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  Basis2        Int            @default(5)
  Interface     Int            @default(5)
  cms           Int            @default(5)
  spms          Int            @default(5)
  newperpay     Int            @default(5)
  oldperpay     Int            @default(5)
  utilitymaster Int            @default(5)
  internet      Int            @default(5)
  exchangemail  Int            @default(5)
  comments      String?
  author        User?          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String?
  message       Message[]
  GroupMessage  GroupMessage[]
}

model Message {
  id         String         @id @default(uuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now()) @updatedAt
  content    String
  author     User?          @relation("UserToMessage", fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String?
  report     Report?        @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId   String?
  reply      ReplyMessage[]
  receiver   User?          @relation("sender", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String?
}

model GroupMessage {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  content      String
  author       User?          @relation("AUTHOR", fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String?
  report       Report?        @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     String?
  reply        ReplyMessage[]
  receiver     User?          @relation("GROUP", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId   String?
  receivermany User[]
}

model ReplyMessage {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  content        String
  author         User?         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String?
  message        Message?      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId      String?
  GroupMessage   GroupMessage? @relation(fields: [groupMessageId], references: [id])
  groupMessageId String?
}

model Activity {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  author    User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String?
}

enum Role {
  USER
  ADMIN
}

enum FromTime {
  from_0700AM
  from_0800AM
  from_0900AM
  from_1000AM
  from_1100AM
  from_1200AM
  from_1300AM
  from_1400AM
  from_1500AM
  from_1600AM
}

enum ToTime {
  to_0800AM
  to_0900AM
  to_1000AM
  to_1100AM
  to_1200AM
  to_1300AM
  to_1400AM
  to_1500AM
  to_1600AM
  to_1700AM
}
